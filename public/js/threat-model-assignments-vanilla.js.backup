/**
 * Threat Model Assignments Vanilla JS
 * 
 * A non-React implementation of the threat model assignments functionality
 * to ensure it works regardless of React loading issues.
 */

// Add event listeners after DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  console.log('Initializing threat model assignments');
  initThreatModelAssignments();
});

/**
 * Get project ID from URL
 */
function getProjectIdFromUrl() {
  const pathParts = window.location.pathname.split('/');
  const projectsIndex = pathParts.indexOf('projects');
  if (projectsIndex !== -1 && projectsIndex < pathParts.length - 1) {
    return pathParts[projectsIndex + 1];
  }
  return null;
}

/**
 * Check if a string is a valid UUID v4
 */
function isValidUUID(uuid) {
  // UUID v4 regex
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
}

/**
 * Main initialization function
 */
function initThreatModelAssignments() {
  console.log('Initializing vanilla threat model assignments');
  
  // Get project ID from the URL
  const projectId = getProjectIdFromUrl();
  console.log('Extracted project ID:', projectId);

  if (!projectId) {
    console.error('Project ID not found in URL');
    showErrorMessage('Project ID not found in URL. Cannot load threat model assignments.');
    return;
  }

  if (!isValidUUID(projectId)) {
    console.error('Project ID is not a valid UUID:', projectId);
    showErrorMessage('Invalid project ID. Please check the URL or contact support.');
    return;
  }

  // Initialize the UI
  const container = document.getElementById('threatModelAssignmentsContainer');
  if (!container) {
    console.error('Threat model assignments container not found');
    return;
  }
  
  console.log('Initialization complete, setting up assign button handlers');
  
  // Set up event delegation for assignThreatModelsBtn clicks
  document.addEventListener('click', function(event) {
    const btn = event.target.closest('.assignThreatModelsBtn');
    if (!btn) return;
    
    event.preventDefault();
    const projectId = btn.getAttribute('data-project-id');
    
    if (!projectId) {
      console.error('No project ID found on button');
      return;
    }
    
    console.log('[ASSIGN] Assign Existing Models button clicked for project:', projectId);
    
    if (typeof bootstrap === 'undefined' || !bootstrap.Modal) {
      console.error('[ASSIGN] Bootstrap JS is not loaded. Modal cannot be opened.');
      alert('Bootstrap JS is not loaded. Please ensure Bootstrap is included.');
      return;
    }
    
    console.log('[ASSIGN] Opening assignment modal for project:', projectId);
    openAssignModal(projectId);
  });
  
  // Show loading state
  showLoading();
  
  // Fetch threat models assigned to this project
  fetchThreatModels(projectId, container);
}

/**
 * Fetch threat models assigned to this project
 */
function fetchThreatModels(projectId, container) {
  if (!projectId || !container) {
    console.error('Missing projectId or container in fetchThreatModels');
    showErrorMessage('Unable to load threat models. Please refresh the page.', container);
    return;
  }

  console.log(`Fetching threat models for project ${projectId}`);
  showLoading(container);

  // Add a cache-busting parameter to prevent browser caching
  const timestamp = new Date().getTime();
  fetch(`/api/projects/${projectId}/threat-models?_=${timestamp}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (!data || typeof data !== 'object') {
        console.error('Malformed response from backend:', data);
        showErrorMessage('Malformed response from server. Please try again.', container);
        return;
      }
      if (data.success === false) {
        console.error('Backend returned failure:', data.error);
        showErrorMessage(data.error || 'Failed to load threat models. Please try again.', container);
        return;
      }
      if (!Array.isArray(data.data)) {
        console.warn('No threat models array returned. Defaulting to empty.');
        renderThreatModelsList([], projectId, container);
        return;
      }
      console.log(`Fetched ${data.data.length} threat models for project ${projectId}`);
      renderThreatModelsList(data.data, projectId, container);
    })
    .catch(error => {
      console.error(`Error fetching threat models for project ${projectId}:`, error);
      showErrorMessage('Failed to load available threat models. Please try again later.', container);
    });
}

/**
 * Render the list of threat models
 */
function renderThreatModelsList(threatModels, projectId, container) {
  if (!container) {
    console.error('Missing container in renderThreatModelsList');
    return;
  }

  // Defensive: treat null/undefined as empty
  if (!Array.isArray(threatModels) || threatModels.length === 0) {
    container.innerHTML = `
      <div class="alert alert-info" role="alert">
        No threat models are currently assigned to this project.
        <button 
          class="btn btn-sm btn-primary ms-3"
          id="emptyStateAssignBtn"
        >
          Assign Threat Models
        </button>
      </div>
    `;
    // Add event listener to the button
    const emptyStateAssignBtn = document.getElementById('emptyStateAssignBtn');
    if (emptyStateAssignBtn) {
      emptyStateAssignBtn.addEventListener('click', function() {
        openAssignModal(projectId);
      });
    }
    return;
  }

  // Render the table with threat models
  let html = `
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3 class="mb-0">Assigned Threat Models</h3>
    </div>
    <div class="table-responsive">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Title</th>
            <th>Created</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  // Add each threat model to the table
  threatModels.forEach(model => {
    const statusClass = getStatusClass(model.status || 'Draft');
    const createdDate = model.created_at ? new Date(model.created_at).toLocaleDateString() : 'Unknown';
    const modelId = model.id || model.subjectid || '';
    const source = model.source || '';
    
    // Determine the correct URL based on the source
    let modelUrl = '';
    if (source === 'redis') {
      // Redis-based threat models should link to results page with subjectid
      modelUrl = `/results?subjectid=${modelId}`;
    } else {
      // PostgreSQL-based threat models link to the threat-models page
      modelUrl = `/threat-models/${modelId}`;
    }
    
    console.log(`Creating link for model ${modelId}, source: ${source}, URL: ${modelUrl}`);
    
    html += `
      <tr data-id="${modelId}" data-source="${source}">
        <td>
          <a href="${modelUrl}" target="_blank">
            ${model.title || 'Untitled Threat Model'}
          </a>
        </td>
        <td>${createdDate}</td>
        <td>
          <span class="badge bg-${statusClass}">
            ${model.status || 'Draft'}
          </span>
        </td>
        <td>
          <div class="btn-group btn-group-sm">
            <a href="${modelUrl}" class="btn btn-outline-primary" title="View Threat Model" target="_blank">
              <i class="bi bi-eye"></i>
            </a>
            <button
              class="btn btn-outline-danger remove-threat-model-btn"
              data-id="${modelId}"
              title="Remove Assignment"
            >
              <i class="bi bi-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
  });
  
  html += `
        </tbody>
      </table>
    </div>
  `;
  
  container.innerHTML = html;
  
  // Add event listeners to remove buttons
  const removeButtons = container.querySelectorAll('.remove-threat-model-btn');
  removeButtons.forEach(button => {
    button.addEventListener('click', function() {
      const threatModelId = this.getAttribute('data-id');
      if (confirm('Are you sure you want to remove this threat model from the project?')) {
        removeThreatModel(threatModelId, projectId, container);
      }
    });
  });
}

/**
 * Remove a threat model from the project
 */
function removeThreatModel(threatModelId, projectId, container) {
  fetch(`/api/projects/${projectId}/threat-models/${threatModelId}`, {
    method: 'DELETE'
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    alert('Threat model removed successfully');
    // Clear cache first, then fetch threat models
    fetch(`/api/projects/${projectId}/clear-cache`, { method: 'POST' })
      .then(data => {
        console.log(`Data received for project ${projectId}:`, data);
        fetchThreatModels(projectId, container);
      })
      .catch(() => {
        // If cache clearing fails, still try to refresh
        fetchThreatModels(projectId, container);
      });
  })
  .catch(error => {
    console.error('Error removing threat model:', error);
    alert('Failed to remove threat model: ' + error.message);
  });
}

/**
 * Open the assign modal
 */
function openAssignModal(projectId) {
  console.log('[MODAL] openAssignModal called with projectId:', projectId);
  
  // Find the modal container
  const modalContainer = document.getElementById('threatModelAssignmentsModal');
  if (!modalContainer) {
    console.error('[MODAL] Modal container not found in DOM');
    alert('Modal container not found. Please refresh the page.');
    return;
  }
  
  // Clear any existing content
  modalContainer.innerHTML = '';
  
  // Create modal
  console.log('[MODAL] Creating modal HTML and inserting into DOM');
  const modalHtml = `
    <div class="modal fade" id="assignThreatModelsModal" tabindex="-1" aria-labelledby="assignThreatModelsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="assignThreatModelsModalLabel">Assign Threat Models</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" id="assignModalContent">
            <div class="text-center py-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading threat models...</p>
            </div>
          </div>
          <div class="modal-footer">
            <div class="me-auto">
              <span class="badge bg-primary" id="selectedCountBadge">0 selected</span>
            </div>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="assignSelectedBtn" disabled>Assign Selected</button>
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Append modal to container
  modalContainer.innerHTML = modalHtml;
    var modal = document.getElementById('assignThreatModelsModal');
    console.log('[MODAL] Modal element created:', modal);
    
    // Add event listener to select all checkbox
    modal.addEventListener('change', function(e) {
    console.log('[MODAL] Change event:', e.target);
      if (e.target.id === 'selectAllThreatModels') {
        const checkboxes = modal.querySelectorAll('.threat-model-checkbox');
        checkboxes.forEach(checkbox => {
          checkbox.checked = e.target.checked;
        });
        updateSelectedCount();
      } else if (e.target.classList.contains('threat-model-checkbox')) {
        updateSelectedCount();
      }
    });
    
    // Add event listener to search input
    modal.addEventListener('input', function(e) {
    console.log('[MODAL] Input event:', e.target);
      if (e.target.id === 'threatModelSearchInput') {
        filterThreatModels(e.target.value);
      }
    });
    
    // Add event listener to assign button
    const assignSelectedBtn = document.getElementById('assignSelectedBtn');
    if (assignSelectedBtn) {
      console.log('[MODAL] Assign Selected button found, adding click listener');
      assignSelectedBtn.addEventListener('click', function() {
        console.log('[MODAL] Assign Selected button clicked');
        assignSelectedThreatModels(projectId);
      });
    } else {
      console.error('[MODAL] Assign Selected button NOT found');
    }
  
  // Show the modal
  try {
    const bsModal = new bootstrap.Modal(modal);
    console.log('[MODAL] Bootstrap modal instance created:', bsModal);
    bsModal.show();
    console.log('[MODAL] Modal should now be visible');
  } catch (err) {
    console.error('[MODAL] Error showing modal:', err);
  }
  // Load available threat models
  console.log('[MODAL] Loading available threat models for assignment...');
  loadAvailableThreatModels(projectId);
}

/**
 * Load available threat models for assignment
 */
// Batch Threat Model Assignment UI logic
function loadAvailableThreatModels(projectId) {
  console.log('[BATCH] Loading unassigned threat models for batch assignment:', projectId);
  const container = document.getElementById('batchAssignThreatModels');
  if (!container) {
    console.error('[BATCH] batchAssignThreatModels container not found');
    return;
  }
  container.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading available threat models...</p></div>';
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => response.json())
    .then(data => {
      if (!data.success) throw new Error(data.error || 'Unknown error');
      const models = data.data || [];
      if (models.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No unassigned threat models available for this project.</div>';
        return;
      }
      // Build table
      let html = '<form id="batchAssignForm"><table class="table table-hover align-middle"><thead><tr>' +
        '<th><input type="checkbox" id="selectAllThreatModels"></th>' +
        '<th>Name</th><th>Description</th><th>Status</th><th>Threats</th><th>Risk</th></tr></thead><tbody>';
      models.forEach(model => {
        html += `<tr>
          <td><input type="checkbox" class="threat-model-checkbox" value="${model.id}"></td>
          <td><a href="/models/${model.id}">${model.name || model.title || 'Untitled'}</a></td>
          <td>${model.description || ''}</td>
          <td><span class="badge bg-${getThreatModelStatusClass(model.status)}">${model.status || ''}</span></td>
          <td>${model.threat_count || 0}</td>
          <td>${typeof model.avg_risk_score === 'number' ? Math.round(model.avg_risk_score) : 'N/A'}</td>
        </tr>`;
      });
      html += '</tbody></table>';
      html += '<button type="submit" class="btn btn-primary" id="assignSelectedBtn" disabled>Assign Selected</button>';
      html += '</form>';
      container.innerHTML = html;
      // Add event listeners
      const checkboxes = Array.from(document.querySelectorAll('.threat-model-checkbox'));
      const selectAll = document.getElementById('selectAllThreatModels');
      const assignBtn = document.getElementById('assignSelectedBtn');
      function updateAssignBtnState() {
        assignBtn.disabled = checkboxes.every(cb => !cb.checked);
      }
      checkboxes.forEach(cb => cb.addEventListener('change', updateAssignBtnState));
      if (selectAll) {
        selectAll.addEventListener('change', function() {
          checkboxes.forEach(cb => { cb.checked = selectAll.checked; });
          updateAssignBtnState();
        });
      }
      // Handle batch assign submit
      const form = document.getElementById('batchAssignForm');
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        const selectedIds = checkboxes.filter(cb => cb.checked).map(cb => cb.value);
        if (selectedIds.length === 0) return;
        assignBtn.disabled = true;
        assignBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Assigning...';
        fetch(`/api/projects/${projectId}/threat-models`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ threatModelIds: selectedIds })
        })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            // Remove assigned rows from table
            checkboxes.forEach(cb => {
              if (cb.checked) cb.closest('tr').remove();
            });
            assignBtn.innerHTML = 'Assign Selected';
            updateAssignBtnState();
            // If table is empty, show info
            if (container.querySelectorAll('tbody tr').length === 0) {
              container.innerHTML = '<div class="alert alert-info">All threat models have been assigned to this project.</div>';
            }
            showProjectDetailAlert('Successfully assigned threat models.', 'success');
          } else {
            assignBtn.innerHTML = 'Assign Selected';
            assignBtn.disabled = false;
            showProjectDetailAlert(result.error || 'Failed to assign threat models.', 'danger');
          }
        })
        .catch(err => {
          assignBtn.innerHTML = 'Assign Selected';
          assignBtn.disabled = false;
          showProjectDetailAlert('Error assigning threat models: ' + err.message, 'danger');
        });
      });
    })
    .catch(error => {
      container.innerHTML = `<div class="alert alert-danger">Failed to load threat models. <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button></div>`;
      showProjectDetailAlert('Error loading threat models: ' + error.message, 'danger');
    });
}

// Helper for showing alert
function showProjectDetailAlert(message, type) {
  const alertContainer = document.getElementById('projectDetailAlertContainer');
  if (!alertContainer) return;
  alertContainer.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
}

// Utility for threat model status badge
function getThreatModelStatusClass(status) {
  switch(status) {
    case 'Draft': return 'warning';
    case 'Active': return 'success';
    case 'Archived': return 'secondary';
    case 'Reviewed': return 'info';
    default: return 'primary';
  }
}

// Auto-init batch assignment UI on page load
window.addEventListener('DOMContentLoaded', function() {
  const projectId = window.location.pathname.split('/').pop();
  if (projectId && /^[\w-]{36}$/.test(projectId)) {
    loadAvailableThreatModels(projectId);
  }
});
  console.log('[LOAD] loadAvailableThreatModels called with projectId:', projectId);
  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) {
    console.error('[LOAD] assignModalContent not found');
    return;
  }
  // Show loading state
  modalContent.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading threat models...</p>
    </div>
  `;
  // Fetch only unassigned threat models for this project
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => {
      console.log('[LOAD] Fetched unassigned-threat-models response:', response);
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('[LOAD] Data received from backend:', data);
      renderAvailableThreatModels(data.data || []);
    })
    .catch(error => {
      console.error('[LOAD] Error loading available threat models:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger" role="alert">
          Failed to load available threat models. Please try again later
          <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button>
        </div>
      `;
    });
}

  console.log('[LOAD] loadAvailableThreatModels called with projectId:', projectId);
  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) {
    console.error('[LOAD] assignModalContent not found');
    return;
  }
  // Show loading state
  modalContent.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading threat models...</p>
    </div>
  `;
  // Fetch only unassigned threat models for this project
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => {
      console.log('[LOAD] Fetched unassigned-threat-models response:', response);
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('[LOAD] Data received from backend:', data);
      renderAvailableThreatModels(data.data || []);
    })
    .catch(error => {
      console.error('[LOAD] Error loading available threat models:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger" role="alert">
          Failed to load available threat models. Please try again later
          <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button>
        </div>
      `;
    });
}

/**
 * Render available threat models in the modal
 */
function renderAvailableThreatModels(threatModels) {
  console.log('[RENDER] renderAvailableThreatModels called with:', threatModels);
  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) {
    console.error('[RENDER] assignModalContent not found');
    return;
  }
  if (!Array.isArray(threatModels) || threatModels.length === 0) {
    modalContent.innerHTML = `
      <div class="alert alert-info" role="alert">
        No available threat models to assign.
      </div>
    `;
    return;
  }
  // ... (existing rendering logic)
}

/**
 * Load available threat models for assignment
 */
// Batch Threat Model Assignment UI logic
function loadAvailableThreatModels(projectId) {
  console.log('[BATCH] Loading unassigned threat models for batch assignment:', projectId);
  const container = document.getElementById('batchAssignThreatModels');
  if (!container) {
    console.error('[BATCH] batchAssignThreatModels container not found');
    return;
  }
  container.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading available threat models...</p></div>';
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => response.json())
    .then(data => {
      if (!data.success) throw new Error(data.error || 'Unknown error');
      const models = data.data || [];
      if (models.length === 0) {
        container.innerHTML = '<div class="alert alert-info">No unassigned threat models available for this project.</div>';
        return;
      }
      // Build table
      let html = '<form id="batchAssignForm"><table class="table table-hover align-middle"><thead><tr>' +
        '<th><input type="checkbox" id="selectAllThreatModels"></th>' +
        '<th>Name</th><th>Description</th><th>Status</th><th>Threats</th><th>Risk</th></tr></thead><tbody>';
      models.forEach(model => {
        html += `<tr>
          <td><input type="checkbox" class="threat-model-checkbox" value="${model.id}"></td>
          <td><a href="/models/${model.id}">${model.name || model.title || 'Untitled'}</a></td>
          <td>${model.description || ''}</td>
          <td><span class="badge bg-${getThreatModelStatusClass(model.status)}">${model.status || ''}</span></td>
          <td>${model.threat_count || 0}</td>
          <td>${typeof model.avg_risk_score === 'number' ? Math.round(model.avg_risk_score) : 'N/A'}</td>
        </tr>`;
      });
      html += '</tbody></table>';
      html += '<button type="submit" class="btn btn-primary" id="assignSelectedBtn" disabled>Assign Selected</button>';
      html += '</form>';
      container.innerHTML = html;
      // Add event listeners
      const checkboxes = Array.from(document.querySelectorAll('.threat-model-checkbox'));
      const selectAll = document.getElementById('selectAllThreatModels');
      const assignBtn = document.getElementById('assignSelectedBtn');
      function updateAssignBtnState() {
        assignBtn.disabled = checkboxes.every(cb => !cb.checked);
      }
      checkboxes.forEach(cb => cb.addEventListener('change', updateAssignBtnState));
      if (selectAll) {
        selectAll.addEventListener('change', function() {
          checkboxes.forEach(cb => { cb.checked = selectAll.checked; });
          updateAssignBtnState();
        });
      }
      // Handle batch assign submit
      const form = document.getElementById('batchAssignForm');
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        const selectedIds = checkboxes.filter(cb => cb.checked).map(cb => cb.value);
        if (selectedIds.length === 0) return;
        assignBtn.disabled = true;
        assignBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Assigning...';
        fetch(`/api/projects/${projectId}/threat-models`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ threatModelIds: selectedIds })
        })
        .then(response => response.json())
        .then(result => {
          if (result.success) {
            // Remove assigned rows from table
            checkboxes.forEach(cb => {
              if (cb.checked) cb.closest('tr').remove();
            });
            assignBtn.innerHTML = 'Assign Selected';
            updateAssignBtnState();
            // If table is empty, show info
            if (container.querySelectorAll('tbody tr').length === 0) {
              container.innerHTML = '<div class="alert alert-info">All threat models have been assigned to this project.</div>';
            }
            showProjectDetailAlert('Successfully assigned threat models.', 'success');
          } else {
            assignBtn.innerHTML = 'Assign Selected';
            assignBtn.disabled = false;
            showProjectDetailAlert(result.error || 'Failed to assign threat models.', 'danger');
          }
        })
        .catch(err => {
          assignBtn.innerHTML = 'Assign Selected';
          assignBtn.disabled = false;
          showProjectDetailAlert('Error assigning threat models: ' + err.message, 'danger');
        });
      });
    })
    .catch(error => {
      container.innerHTML = `<div class="alert alert-danger">Failed to load threat models. <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button></div>`;
      showProjectDetailAlert('Error loading threat models: ' + error.message, 'danger');
    });
}

// Helper for showing alert
function showProjectDetailAlert(message, type) {
  const alertContainer = document.getElementById('projectDetailAlertContainer');
  if (!alertContainer) return;
  alertContainer.innerHTML = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
}

// Utility for threat model status badge
function getThreatModelStatusClass(status) {
  switch(status) {
    case 'Draft': return 'warning';
    case 'Active': return 'success';
    case 'Archived': return 'secondary';
    case 'Reviewed': return 'info';
    default: return 'primary';
  }
}

// Auto-init batch assignment UI on page load
window.addEventListener('DOMContentLoaded', function() {
  const projectId = window.location.pathname.split('/').pop();
  if (projectId && /^[\w-]{36}$/.test(projectId)) {
    loadAvailableThreatModels(projectId);
  }
});
  console.log('[LOAD] loadAvailableThreatModels called with projectId:', projectId);
  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) {
    console.error('[LOAD] assignModalContent not found');
    return;
  }
  // Show loading state
  modalContent.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading threat models...</p>
    </div>
  `;
  // Fetch only unassigned threat models for this project
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => {
      console.log('[LOAD] Fetched unassigned-threat-models response:', response);
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('[LOAD] Data received from backend:', data);
      renderAvailableThreatModels(data.data || []);
    })
    .catch(error => {
      console.error('[LOAD] Error loading available threat models:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger" role="alert">
          Failed to load available threat models. Please try again later
          <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button>
        </div>
      `;
    });
}

  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) return;
  
  // Show loading state
  modalContent.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading threat models...</p>
    </div>
  `;
  
  // Fetch only unassigned threat models for this project
  fetch(`/api/projects/${projectId}/unassigned-threat-models`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      // Only keep models with numeric IDs
      const numericModels = (data.data || []).filter(tm => /^[0-9]+$/.test(tm.id?.toString()));
      renderAvailableThreatModels(numericModels);
    })
    .catch(error => {
      console.error('Error loading available threat models:', error);
      modalContent.innerHTML = `
        <div class="alert alert-danger" role="alert">
          Failed to load available threat models. Please try again later
          <button class="btn btn-sm btn-outline-primary ms-2" onclick="loadAvailableThreatModels('${projectId}')">Try Again</button>
        </div>
      `;
    });
}

/**
 * Render available threat models in the modal
 */
function renderAvailableThreatModels(threatModels) {
  const modalContent = document.getElementById('assignModalContent');
  if (!modalContent) return;
  
  if (!threatModels || threatModels.length === 0) {
    modalContent.innerHTML = `
      <div class="alert alert-info" role="alert">
        No threat models available for assignment. All threat models are already assigned to this project.
      </div>
    `;
    return;
  }
  
  let html = `
    <div class="mb-3">
      <input type="text" class="form-control" id="threatModelSearchInput" placeholder="Search threat models...">
    </div>
    <div class="mb-3">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="selectAllThreatModels">
        <label class="form-check-label" for="selectAllThreatModels">
          Select All
        </label>
      </div>
    </div>
    <div class="list-group mb-3" id="availableThreatModelsList">
  `;
  
  // Add each threat model to the list
  threatModels.forEach(tm => {
    const id = tm.id;
    const title = tm.title || 'Untitled Threat Model';
    const description = tm.description || '';
    const status = tm.status || '';
    const createdDate = tm.created_at ? new Date(tm.created_at).toLocaleDateString() : 'Unknown';
    
    html += `
      <div class="list-group-item list-group-item-action">
        <div class="d-flex w-100 justify-content-between align-items-center">
          <div class="form-check">
            <input class="form-check-input threat-model-checkbox" type="checkbox" id="tm-${id}" data-id="${id}">
            <label class="form-check-label" for="tm-${id}">
              ${title}
            </label>
          </div>
          <small class="text-muted">
            ${status ? `Status: ${status} | ` : ''}
            Created: ${createdDate}
          </small>
        </div>
        ${description ? `<p class="mb-1 small text-muted">${description}</p>` : ''}
      </div>
    `;
  });
  
  html += `
    </div>
  `;
  
  modalContent.innerHTML = html;
  
  // Initialize the selected count
  updateSelectedCount();
}

/**
 * Filter threat models based on search query
 */
function filterThreatModels(query) {
  const list = document.getElementById('availableThreatModelsList');
  if (!list) return;
  
  const items = list.querySelectorAll('.list-group-item');
  const lowerQuery = query.toLowerCase();
  
  items.forEach(item => {
    const title = item.querySelector('label').textContent.trim().toLowerCase();
    const description = item.querySelector('p')?.textContent.trim().toLowerCase() || '';
    
    if (title.includes(lowerQuery) || description.includes(lowerQuery)) {
      item.style.display = '';
    } else {
      item.style.display = 'none';
    }
  });
}

/**
 * Update the selected count badge
 */
function updateSelectedCount() {
  const selectedCheckboxes = document.querySelectorAll('.threat-model-checkbox:checked');
  const countBadge = document.getElementById('selectedCountBadge');
  const assignButton = document.getElementById('assignSelectedBtn');
  
  if (countBadge) {
    countBadge.textContent = `${selectedCheckboxes.length} selected`;
  }
  
  if (assignButton) {
    assignButton.disabled = selectedCheckboxes.length === 0;
  }
}

/**
 * Assign selected threat models to the project
 */
function assignSelectedThreatModels(projectId) {
  const selectedCheckboxes = document.querySelectorAll('.threat-model-checkbox:checked');
  
  // Allow UUIDs (v4) or numeric IDs for assignment
  const threatModelIds = Array.from(selectedCheckboxes)
    .map(cb => cb.getAttribute('data-id'))
    .filter(id => /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id) || /^[0-9]+$/.test(id));
  
  console.log('Final threat model IDs for assignment:', JSON.stringify(threatModelIds));
  
  // If there are no IDs to assign, show an error and return early
  if (threatModelIds.length === 0) {
    toastr.error('No threat models selected for assignment');
      assignButton.disabled = false;
      assignButton.innerHTML = 'Assign Selected';
    }
    return false;
  }
  
  console.log('Selected threat model IDs for assignment:', threatModelIds);
  
  if (threatModelIds.length === 0) {
    toastr.warning('Please select at least one threat model to assign');
    return;
  }
  
  // Disable the button to prevent multiple clicks
  const assignButton = document.getElementById('assignSelectedBtn');
  if (assignButton) {
    assignButton.disabled = true;
    assignButton.innerHTML = `
      <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
      Assigning...
    `;
  }
  
  // Store modal reference for later use
  const modal = bootstrap.Modal.getInstance(document.getElementById('assignThreatModelsModal'));
  
  // Add a timeout to reset the button if the request takes too long
  const buttonResetTimeout = setTimeout(() => {
    if (assignButton) {
      assignButton.disabled = false;
      assignButton.innerHTML = 'Assign Selected';
      console.warn('The operation is taking longer than expected. It may still complete in the background.');
    }
  }, 5000); // 5 seconds timeout - reduced from 10 seconds
  
  // Add debug timestamp
  console.log(`Assignment request started at: ${new Date().toISOString()}`);
  
  // Send the request
  fetch(`/api/projects/${projectId}/threat-models`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ threatModelIds })
  })
  .then(response => {
    console.log(`Response received at: ${new Date().toISOString()}, status: ${response.status}`);
    
    if (!response.ok) {
      throw new Error(`Error: ${response.status}`);
    }
    
    // Parse the JSON response immediately without delay
    return response.json();
  })
  .then(result => {
    // Clear the timeout since we got a response
    clearTimeout(buttonResetTimeout);
    
    console.log(`Assignment successful at: ${new Date().toISOString()}`, result);
    
    // Immediately reset button state
    if (assignButton) {
      assignButton.disabled = false;
      assignButton.innerHTML = 'Assign Selected';
    }
    
    // Show success message
    alert('Threat models assigned successfully');
    
    // Debug info about the assigned models
    console.log('Assigned threat models:', threatModelIds);

    // Show a success modal before closing the assignment modal and refreshing
    // First, close the assignment modal
    if (modal) {
      modal.hide();
    }
    
    // Create and show a success modal
    const successModalHtml = `
      <div class="modal fade" id="assignmentSuccessModal" tabindex="-1" aria-labelledby="assignmentSuccessModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content">
            <div class="modal-header bg-success text-white">
              <h5 class="modal-title" id="assignmentSuccessModalLabel">Assignment Successful</h5>
              <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
              <div class="mb-3">
                <i class="bi bi-check-circle-fill text-success" style="font-size: 3rem;"></i>
              </div>
              <p class="lead">Successfully assigned ${threatModelIds.length} threat model(s) to project.</p>
              <p class="text-muted">The page will refresh automatically in a moment.</p>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Add the modal to the DOM
    const successModalContainer = document.createElement('div');
    successModalContainer.innerHTML = successModalHtml;
    document.body.appendChild(successModalContainer.firstElementChild);
    
    // Show the success modal
    const successModal = new bootstrap.Modal(document.getElementById('assignmentSuccessModal'));
    successModal.show();
    
    // Force reload the page after showing the success modal for a short time
    setTimeout(() => {
      window.location.reload();
    }, 1500); // Give enough time to see the success modal
  })
  .catch(error => {
    // Clear the timeout since we got a response
    clearTimeout(buttonResetTimeout);

    
    console.error(`Error assigning threat models at: ${new Date().toISOString()}:`, error);
    
    // Immediately reset button state
    if (assignButton) {
      assignButton.disabled = false;
      assignButton.innerHTML = 'Assign Selected';
    }
    
    // Display a simple error message
    toastr.error('Failed to assign threat models. Please try again.');
  });
  
  // Return false to prevent form submission
  return false;
}

/**
 * Show loading state
 */
function showLoading(container) {
  if (!container) {
    container = document.getElementById('threatModelAssignmentsContainer');
  }
  if (!container) return;
  
  container.innerHTML = `
    <div class="text-center py-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2">Loading threat models...</p>
    </div>
  `;
}

/**
 * Show error message
 */
function showErrorMessage(message, container) {
  if (!container) {
    container = document.getElementById('threatModelAssignmentsContainer');
  }
  if (!container) return;
  
  container.innerHTML = `
    <div class="alert alert-warning">
      <i class="bi bi-exclamation-triangle-fill me-2"></i>
      ${message || 'Unable to load threat models. Please try again later.'}
      <button class="btn btn-sm btn-outline-primary ms-3" onclick="window.location.reload()">
        Refresh Page
      </button>
    </div>
  `;
}

/**
 * Get the status class for a threat model status
 */
function getStatusClass(status) {
  switch(status) {
    case 'Active': return 'success';
    case 'Draft': return 'secondary';
    case 'In Review': return 'info';
    case 'Approved': return 'primary';
    case 'Deprecated': return 'warning';
    default: return 'secondary';
  }
}
