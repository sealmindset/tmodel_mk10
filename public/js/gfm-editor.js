(()=>{"use strict";
class GFMEditor{
  constructor(textarea,opts={}){if(!(textarea instanceof Element)||textarea.tagName!=="TEXTAREA")throw new Error("GFMEditor requires a <textarea>");
    if(textarea.__gfmEditor)return textarea.__gfmEditor;this.ta=textarea;this.opts=opts;this._raf=0;this._previewHeld=false;this._build();this._bindHandlers();this._addListeners();this._autosize();this._scheduleGhost();this._announce("Editor ready.");textarea.__gfmEditor=this;return textarea.__gfmEditor}
  static autoInit(sel='textarea[data-gfm-editor]'){return Array.from(document.querySelectorAll(sel)).map(n=>new GFMEditor(n));}
  destroy(){this.ta.removeEventListener('input',this._onInput);this.ta.removeEventListener('scroll',this._onScroll);this.ta.removeEventListener('keydown',this._onKeyDown);this.ta.removeEventListener('keyup',this._onKeyUp);this.toolbar.removeEventListener('click',this._onToolbarClick);this.previewBtn.removeEventListener('mousedown',this._onPreviewDown);this.previewBtn.removeEventListener('mouseup',this._onPreviewUp);this.previewBtn.removeEventListener('mouseleave',this._onPreviewUp);this.previewBtn.removeEventListener('touchstart',this._onPreviewTouchDown);this.previewBtn.removeEventListener('touchend',this._onPreviewTouchUp);window.removeEventListener('mouseup',this._onPreviewUp);window.removeEventListener('touchend',this._onPreviewTouchUp);this.lockChk.removeEventListener('change',this._onLockChange);this.container.parentNode.insertBefore(this.ta,this.container);this.container.remove();delete this.ta.__gfmEditor}
  _build(){this.container=document.createElement('div');this.container.className='gfm-editor';this.toolbar=document.createElement('div');this.toolbar.className='gfm-toolbar';const btn=(label,cmd,primary=false)=>{const b=document.createElement('button');b.type='button';b.className='btn';if(primary)b.setAttribute('data-primary','');b.textContent=label;b.setAttribute('aria-label',label);b.dataset.cmd=cmd;return b};const hbox=document.createElement('span');hbox.className='hbox';this.hSelect=document.createElement('select');for(let i=1;i<=6;i++){const o=document.createElement('option');o.value=String(i);o.textContent='H'+i;this.hSelect.appendChild(o)}this.hSelect.value='1';const hBtn=btn('H','heading');hBtn.title='Heading';[btn('B','bold',true),btn('I','italic'),btn('S','strike'),btn('`','code'),btn('</>','codeblock'),hbox,btn('> Quote','quote'),btn('OL','olist'),btn('UL','ulist'),btn('Task','task'),btn('Link','link'),btn('Image','image'),btn('Table','table'),btn('HR','hr')].forEach(b=>{if(b===hbox){hbox.append(this.hSelect,hBtn)}this.toolbar.appendChild(b)});const sep=document.createElement('div');sep.className='sep';this.toolbar.appendChild(sep);this.previewBtn=btn('Preview (hold)','preview');this.lockWrap=document.createElement('label');this.lockWrap.style.display='inline-flex';this.lockWrap.style.alignItems='center';this.lockWrap.style.gap='6px';this.lockWrap.setAttribute('aria-label','Lock Preview');this.lockChk=document.createElement('input');this.lockChk.type='checkbox';const lockLab=document.createElement('span');lockLab.textContent='Lock Preview';this.lockWrap.append(this.lockChk,lockLab);this.toolbar.append(this.previewBtn,this.lockWrap);this.surface=document.createElement('div');this.surface.className='gfm-surface';this.ghost=document.createElement('div');this.ghost.className='gfm-ghost';this.ghostPre=document.createElement('pre');this.ghostCode=document.createElement('code');this.ghostPre.appendChild(this.ghostCode);this.ghost.appendChild(this.ghostPre);this.ta.classList.add('gfm-textarea');this.preview=document.createElement('div');this.preview.className='gfm-preview';this.preview.setAttribute('aria-label','Rendered preview');this.aria=document.createElement('div');this.aria.className='gfm-aria';this.aria.setAttribute('aria-live','polite');this.aria.setAttribute('aria-atomic','true');this.ta.parentNode.insertBefore(this.container,this.ta);this.container.append(this.toolbar,this.surface);this.surface.append(this.ghost,this.ta,this.preview);this.container.appendChild(this.aria)}
  _bindHandlers(){this._onInput=()=>{this._autosize();this._scheduleGhost()};this._onScroll=()=>this._syncGhostScroll();this._onToolbarClick=e=>{const t=e.target.closest('button.btn');if(!t||!t.dataset.cmd)return;this.ta.focus();switch(t.dataset.cmd){case'bold':this._toggleInline('**','bold');break;case'italic':this._toggleInline('_','italic');break;case'strike':this._toggleInline('~~','strike');break;case'code':this._toggleInline('`','code');break;case'codeblock':this._toggleFence();break;case'heading':this._applyHeading(parseInt(this.hSelect.value,10)||1);break;case'quote':this._toggleQuote();break;case'olist':this._toggleList('ol');break;case'ulist':this._toggleList('ul');break;case'task':this._toggleTask();break;case'link':this._insertLink();break;case'image':this._insertImage();break;case'table':this._insertTable();break;case'hr':this._insertHR();break}};this._onKeyDown=e=>{if(!e.altKey&&!e.ctrlKey&&!e.metaKey&&e.shiftKey&&(e.key==='P'||e.key==='p')){e.preventDefault();this._previewHeld=true;this._showPreview();return}const mod=e.metaKey||e.ctrlKey;if(mod&&!e.shiftKey&&(e.key==='b'||e.key==='B')){e.preventDefault();this._toggleInline('**','bold');return}if(mod&&!e.shiftKey&&(e.key==='i'||e.key==='I')){e.preventDefault();this._toggleInline('_','italic');return}if(mod&&!e.shiftKey&&(e.key==='e'||e.key==='E')){e.preventDefault();this._toggleInline('`','code');return}if(mod&&e.shiftKey&&(e.key==='c'||e.key==='C')){e.preventDefault();this._toggleFence();return}if(mod&&!e.shiftKey&&(e.key==='k'||e.key==='K')){e.preventDefault();this._insertLink();return}if(!mod&&!e.shiftKey&&e.key==='Enter'){if(this._continueList()){e.preventDefault();return}}if(!mod&&e.key==='Tab'){if(this._indentOrOutdent(e.shiftKey?-1:1)){e.preventDefault();return}}};this._onKeyUp=e=>{if((e.key==='P'||e.key==='p')&&this._previewHeld){this._previewHeld=false;if(!this.lockChk.checked)this._hidePreview()}};this._onPreviewDown=e=>{e.preventDefault();this._showPreview()};this._onPreviewUp=()=>{if(!this.lockChk.checked)this._hidePreview()};this._onPreviewTouchDown=e=>{e.preventDefault();this._showPreview()};this._onPreviewTouchUp=()=>{if(!this.lockChk.checked)this._hidePreview()};this._onLockChange=()=>{if(this.lockChk.checked)this._showPreview();else this._hidePreview()}}
  _addListeners(){this.ta.addEventListener('input',this._onInput);this.ta.addEventListener('scroll',this._onScroll);this.ta.addEventListener('keydown',this._onKeyDown);this.ta.addEventListener('keyup',this._onKeyUp);this.toolbar.addEventListener('click',this._onToolbarClick);this.previewBtn.addEventListener('mousedown',this._onPreviewDown);this.previewBtn.addEventListener('mouseup',this._onPreviewUp);this.previewBtn.addEventListener('mouseleave',this._onPreviewUp);this.previewBtn.addEventListener('touchstart',this._onPreviewTouchDown,{passive:false});this.previewBtn.addEventListener('touchend',this._onPreviewTouchUp);window.addEventListener('mouseup',this._onPreviewUp);window.addEventListener('touchend',this._onPreviewTouchUp);this.lockChk.addEventListener('change',this._onLockChange)}
  _autosize(){const max=window.innerHeight*0.70;this.ta.style.height='auto';const h=Math.min(this.ta.scrollHeight,max);this.ta.style.height=h+'px'}
  _scheduleGhost(){if(this._raf)return;this._raf=requestAnimationFrame(()=>{this._raf=0;this.ghostCode.innerHTML=this._highlight(this.ta.value);this._syncGhostScroll()})}
  _syncGhostScroll(){this.ghostPre.style.transform=`translate(${-this.ta.scrollLeft}px,${-this.ta.scrollTop}px)`}
  _escapeHtml(s){return s.replace(/[&<>"']/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]))}
  _highlight(md){const lines=md.replace(/\r\n/g,'\n').split('\n');const out=[];for(let i=0;i<lines.length;i++){const raw=lines[i];let line=this._escapeHtml(raw);if(/^\s{0,3}(-{3,}|\*{3,}|_{3,})\s*$/.test(raw)){out.push(`<span class="md-hr">${line}</span>`);continue}line=line.replace(/(^|\s)(```+|~~~+)/g,(_,a,b)=>`${a}<span class="md-fence">${b}</span>`);line=line.replace(/^(\s*)(#{1,6})(\s+)/,(_,s,h,sp)=>`${s}<span class="md-heading">${h}</span>${sp}`);line=line.replace(/^(\s*)(&gt;)/,(_,s,gt)=>`${s}<span class="md-quote">${gt}</span>`);line=line.replace(/^(\s*)([*+-]|\d+\.)\s+/,(_,s,m)=>`${s}<span class="md-list">${m}</span> `);line=line.replace(/~~/g,'<span class="md-del">~~<\/span>').replace(/\*\*/g,'<span class="md-strong">**<\/span>').replace(/__/g,'<span class="md-strong">__<\/span>').replace(/`/g,'<span class="md-code-marker">`<\/span>');line=line.replace(/!\[[^\]]*\]\([^\)\s]+\)/g,m=>`<span class="md-img">${m}<\/span>`).replace(/\[[^\]]*\]\([^\)\s]+\)/g,m=>`<span class="md-link">${m}<\/span>`);if(raw.includes('|'))line=line.replace(/\|/g,'<span class="md-table">|<\/span>');out.push(line)}return out.join('\n')}
  _announce(msg){this.aria.textContent=msg}
  _getSel(){return{ s:this.ta.selectionStart,e:this.ta.selectionEnd }}
  _setSel(s,e){this.ta.selectionStart=s;this.ta.selectionEnd=e;this.ta.focus()}
  _dispatchInput(){try{this.ta.dispatchEvent(new Event('input',{bubbles:true}))}catch(e){/* noop */}}
  _edit(fn){const st=this.ta.scrollTop,sl=this.ta.scrollLeft;const{ s,e }=this._getSel();const src=this.ta.value;const r=fn(src,s,e)||{};if(r.text!==undefined){this.ta.value=r.text;this._dispatchInput();this._scheduleGhost()}if(r.selStart!==undefined&&r.selEnd!==undefined)this._setSel(r.selStart,r.selEnd);this.ta.scrollTop=st;this.ta.scrollLeft=sl;if(r.announce)this._announce(r.announce)}
  _lineRange(src,s,e){const a=src.lastIndexOf('\n',s-1)+1;let b=src.indexOf('\n',e);if(b===-1)b=src.length;return{a,b,start:s,end:e}}
  _toggleInline(marker,kind){this._edit((src,s,e)=>{const m=marker;const before=src.slice(0,s),mid=src.slice(s,e),after=src.slice(e);const hasWrap=s>=m.length&&after.startsWith(m)&&src.slice(s-m.length,s)===m;if(hasWrap){const text=src.slice(0,s-m.length)+mid+after.slice(m.length);return{text,selStart:s-m.length,selEnd:e-m.length,announce:`${kind} removed`}}const ph=mid.length?mid:kind;const text=before+m+ph+m+after;const ns=s+m.length,ne=ns+ph.length;return{text,selStart:ns,selEnd:ne,announce:`${kind} applied`}})}
  _applyHeading(level){const re=/(^\s*)(#{1,6}\s*)?/;this._edit((src,s,e)=>{const{a,b,start}=this._lineRange(src,s,e);const lines=src.slice(a,b).split('\n');let delta=0;for(let i=0;i<lines.length;i++){const L=lines[i];const m=L.match(re);const pref='#'.repeat(level)+' ';if(m){const rest=L.slice(m[0].length);if((m[2]||'').trim()==='#'.repeat(level)){lines[i]=m[1]+rest;delta-=pref.length}else{lines[i]=m[1]+pref+rest;delta+=pref.length-(m[2]?m[2].length:0)}}else{lines[i]=pref+L;delta+=pref.length}}const block=lines.join('\n');const text=src.slice(0,a)+block+src.slice(b);return{text,selStart:start+(delta>0?('#'.repeat(level)+' ').length:0),selEnd:start+block.length,announce:`Heading ${level}`}})}
  _toggleQuote(){this._toggleLinePrefix('> ')}
  _toggleList(t){if(t==='ul')this._toggleLinePrefix('- ');else this._toggleOrderedList()}
  _toggleTask(){this._edit((src,s,e)=>{const{a,b,start}=this._lineRange(src,s,e);const lines=src.slice(a,b).split('\n');for(let i=0;i<lines.length;i++){let L=lines[i];if(/^\s*-\s\[\s\]\s/.test(L))lines[i]=L.replace(/^(\s*-\s)\[\s\]\s/,'$1[x] ');else if(/^\s*-\s\[x\]\s/i.test(L))lines[i]=L.replace(/^(\s*-\s)\[x\]\s/i,'$1[ ] ');else if(/^\s*-\s/.test(L))lines[i]=L.replace(/^(\s*-\s)/,'$1[ ] ');else lines[i]='- [ ] '+L}const block=lines.join('\n');const text=src.slice(0,a)+block+src.slice(b);return{text,selStart:start,selEnd:start+block.length,announce:'Task toggled'}})}
  _toggleOrderedList(){this._edit((src,s,e)=>{const{a,b,start}=this._lineRange(src,s,e);const lines=src.slice(a,b).split('\n');const all=lines.every(L=>/^\s*\d+\.\s/.test(L));if(all){for(let i=0;i<lines.length;i++)lines[i]=lines[i].replace(/^\s*\d+\.\s/,'')}else{let n=1;for(let i=0;i<lines.length;i++){const L=lines[i].replace(/^\s*\d+\.\s/,'');lines[i]=`${n}. `+L;n++}}const block=lines.join('\n');const text=src.slice(0,a)+block+src.slice(b);return{text,selStart:start,selEnd:start+block.length,announce:'List toggled'}})}
  _toggleLinePrefix(prefix){this._edit((src,s,e)=>{const{a,b,start}=this._lineRange(src,s,e);const lines=src.slice(a,b).split('\n');for(let i=0;i<lines.length;i++){const L=lines[i];lines[i]=L.startsWith(prefix)?L.slice(prefix.length):prefix+L}const block=lines.join('\n');const text=src.slice(0,a)+block+src.slice(b);return{text,selStart:start,selEnd:start+block.length,announce:'Prefix toggled'}})}
  _toggleFence(){this._edit((src,s,e)=>{let lang=prompt('Fenced code language (optional):','');if(lang===null)lang='';const before=src.slice(0,s),mid=src.slice(s,e),after=src.slice(e);const left=before.match(/```[^\n]*\n?$/),right=after.match(/^\n?```/);if(left&&right){const nb=before.replace(/```[^\n]*\n?$/,'');const na=after.replace(/^\n?```/,'');const text=nb+mid+na;return{text,selStart:nb.length,selEnd:nb.length+mid.length,announce:'Code block removed'}}const fence='```'+(lang||'')+'\n';const text=before+fence+(mid||'')+'\n```'+after;const ns=before.length+fence.length,ne=ns+(mid||'').length;return{text,selStart:ns,selEnd:ne,announce:'Code block added'}})}
  _insertLink(){this._edit((src,s,e)=>{const url=prompt('Link URL:','https://');if(!url)return{text:src,selStart:s,selEnd:e};const label=src.slice(s,e)||'text';const before=src.slice(0,s),after=src.slice(e);const ins=`[${label}](${url})`;const text=before+ins+after;const ns=before.length+1,ne=ns+label.length;return{text,selStart:ns,selEnd:ne,announce:'Link inserted'}})}
  _insertImage(){this._edit((src,s,e)=>{const url=prompt('Image URL:','https://');if(!url)return{text:src,selStart:s,selEnd:e};const alt=src.slice(s,e)||'image';const before=src.slice(0,s),after=src.slice(e);const ins=`![${alt}](${url})`;const text=before+ins+after;const ns=before.length+2,ne=ns+alt.length;return{text,selStart:ns,selEnd:ne,announce:'Image inserted'}})}
  _insertTable(){this._edit((src,s,e)=>{const scaffold=`| Col 1 | Col 2 | Col 3 |\n| --- | --- | --- |\n|  |  |  |\n|  |  |  |`;const before=src.slice(0,s),after=src.slice(e);const text=before+scaffold+after;const ns=before.length,ne=ns+scaffold.length;return{text,selStart:ns,selEnd:ne,announce:'Table inserted'}})}
  _insertHR(){this._edit((src,s,e)=>{const before=src.slice(0,s),after=src.slice(e);const ins='\n---\n';const text=before+ins+after;const pos=before.length+ins.length;return{text,selStart:pos,selEnd:pos,announce:'Horizontal rule inserted'}})}
  _continueList(){const src=this.ta.value;const s=this.ta.selectionStart;const a=src.lastIndexOf('\n',s-1)+1;let b=src.indexOf('\n',s);if(b===-1)b=src.length;const line=src.slice(a,b);let m=line.match(/^(\s*)([*+-])\s(\[.\]\s)?(.*)$/);if(m){const indent=m[1]||'';const bullet=m[2];const task=m[3]||'';const rest=m[4]||'';this._edit(()=>{if(rest.trim()===''){const text=src.slice(0,a)+indent+src.slice(b);const pos=a+indent.length;return{text,selStart:pos,selEnd:pos,announce:'List ended'}}const ins='\n'+indent+bullet+' '+task;const text=src.slice(0,s)+ins+src.slice(s);const pos=s+ins.length;return{text,selStart:pos,selEnd:pos,announce:'List continued'}});return true}
    m=line.match(/^(\s*)(\d+)\.\s(.*)$/);if(m){const indent=m[1]||'';const n=parseInt(m[2],10)||1;const rest=m[3]||'';this._edit(()=>{if(rest.trim()===''){const text=src.slice(0,a)+indent+src.slice(b);const pos=a+indent.length;return{text,selStart:pos,selEnd:pos,announce:'List ended'}}const ins='\n'+indent+(n+1)+'. ';const text=src.slice(0,s)+ins+src.slice(s);const pos=s+ins.length;return{text,selStart:pos,selEnd:pos,announce:'List continued'}});return true}
    return false}
  _indentOrOutdent(dir){const src=this.ta.value;const{ s,e }=this._getSel();const{a,b,start}=this._lineRange(src,s,e);const lines=src.slice(a,b).split('\n');let changed=false;for(let i=0;i<lines.length;i++){if(dir>0){lines[i]='  '+lines[i];changed=true}else{const before=lines[i];lines[i]=before.replace(/^ {1,2}/,'');if(lines[i]!==before)changed=true}}if(!changed)return false;const block=lines.join('\n');const text=src.slice(0,a)+block+src.slice(b);const delta=dir>0?2:-2;this._edit(()=>({text,selStart:start+Math.max(0,delta),selEnd:start+block.length,announce:dir>0?'Indented':'Outdented'}));return true}
  _showPreview(){this.preview.innerHTML=this._sanitize(this._renderMarkdown(this.ta.value));this.preview.classList.add('show')}
  _hidePreview(){this.preview.classList.remove('show')}
  _renderMarkdown(md){md=md.replace(/\r\n/g,'\n');const out=[];let i=0,inFence=false;const lines=md.split('\n');const pushPara=(buf)=>{const txt=buf.join('\n').trim();if(!txt)return;out.push(`<p>${this._inline(txt)}</p>`);buf.length=0};let buf=[];const closeAllLists=(stack)=>{while(stack.length){out.push(`</${stack.pop()}>`)}};let listStack=[];const closeParaAndLists=()=>{pushPara(buf);closeAllLists(listStack)};const openList=(type,depth)=>{while(listStack.length>depth)out.push(`</${listStack.pop()}>`);while(listStack.length<depth){listStack.push(type);out.push(`<${type}>`)}if(listStack[listStack.length-1]!==type){out.push(`</${listStack.pop()}>`);listStack.push(type);out.push(`<${type}>`)}};const closeLists=()=>{closeAllLists(listStack)};while(i<lines.length){let l=lines[i];if(/^(\s*)(```|~~~)/.test(l)){const m=l.match(/^(\s*)(```|~~~)\s*([\w-]+)?\s*$/);if(!inFence){inFence=true;closeParaAndLists();out.push(`<pre><code>`)}else{inFence=false;out.push(`</code></pre>`)}i++;continue}if(inFence){out.push(this._escapeHtml(l)+(i<lines.length-1?'\n':''));i++;continue}const hr=/^\s{0,3}(-{3,}|\*{3,}|_{3,})\s*$/.test(l);if(hr){closeParaAndLists();out.push('<hr>');i++;continue}let m;if((m=l.match(/^(\s*)(#{1,6})\s+(.*)$/))){closeParaAndLists();const lvl=m[2].length;out.push(`<h${lvl}>${this._inline(m[3])}</h${lvl}>`);i++;continue}if(/^(\s*)> ?/.test(l)){closeAllLists(listStack);const quote=[];while(i<lines.length&&/^(\s*)> ?/.test(lines[i])){quote.push(lines[i].replace(/^(\s*)> ?/,'').trimEnd());i++}out.push(`<blockquote>${this._renderMarkdown(quote.join('\n'))}</blockquote>`);continue}
      if(l.includes('|')&&i+1<lines.length&&/^\s*\|?\s*:?-{3,}\s*(\|\s*:?-{3,}\s*)+\|?\s*$/.test(lines[i+1])){closeParaAndLists();const header=lines[i].trim();i+=2;const rows=[];while(i<lines.length&&/\|/.test(lines[i])){if(!lines[i].trim())break;rows.push(lines[i].trim());i++}const parseRow=r=>r.replace(/^\|/,'').replace(/\|$/,'').split('|').map(c=>c.trim());const th=parseRow(header);const body=rows.map(parseRow);let html='<table><thead><tr>'+th.map(h=>`<th>${this._inline(h)}</th>`).join('')+'</tr></thead><tbody>';for(const r of body){html+='<tr>'+r.map(c=>`<td>${this._inline(c)}</td>`).join('')+'</tr>'}html+='</tbody></table>';out.push(html);continue}
      if((m=l.match(/^(\s*)([*+-])\s+(.*)$/))||(m=l.match(/^(\s*)(\d+)\.\s+(.*)$/))){const indent=Math.floor((m[1]||'').length/2);const isUL=!!m[2]&&isNaN(parseInt(m[2],10));const type=isUL?'ul':'ol';openList(type,indent+1);let content=isUL?m[3]:(m[3]);const task=content.match(/^\[( |x|X)\]\s*/);if(task){content=content.replace(/^\[( |x|X)\]\s*/,'')}out.push(`<li>${this._inline(content)}</li>`);i++;continue}
      if(l.trim()===''){pushPara(buf);closeLists();i++;continue}buf.push(l);i++}
    pushPara(buf);closeLists();return out.join('\n')}
  _inline(t){const esc=s=>s.replace(/[&<>]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));const codes=[];t=t.replace(/`([^`]+)`/g,(m,g)=>{codes.push(`<code>${esc(g)}</code>`);return '\u0000'+(codes.length-1)+'\u0000'});t=esc(t);t=t.replace(/!\[([^\]]*)\]\(([^)\s]+)\)/g,(m,a,u)=>`<img alt="${a.replace(/"/g,'&quot;')}" src="${u.replace(/"/g,'&quot;')}">`);t=t.replace(/\[([^\]]+)\]\(([^)\s]+)\)/g,(m,a,u)=>`<a href="${u.replace(/"/g,'&quot;')}">${a}</a>`);t=t.replace(/(^|[\s(])((https?:\/\/|mailto:)[^\s)]+)/g,(m,p,u)=>`${p}<a href="${u.replace(/"/g,'&quot;')}">${u}</a>`);t=t.replace(/~~([^~]+)~~/g,'<del>$1</del>');t=t.replace(/\*\*([^*]+)\*\*/g,'<strong>$1</strong>').replace(/__([^_]+)__/g,'<strong>$1</strong>');t=t.replace(/(^|[^*_])\*([^*\n]+)\*(?!\*)/g,'$1<em>$2</em>').replace(/(^|[^*_])_([^_\n]+)_(?!_)/g,'$1<em>$2</em>');t=t.replace(/\u0000(\d+)\u0000/g,(m,i)=>codes[+i]||m);return t}
  _sanitize(html){const allow=new Set(['P','H1','H2','H3','H4','H5','H6','UL','OL','LI','PRE','CODE','BLOCKQUOTE','STRONG','EM','DEL','A','IMG','TABLE','THEAD','TBODY','TR','TH','TD','HR']);const attrAllow={A:['href','rel','target'],IMG:['src','alt'],TH:['colspan','rowspan'],TD:['colspan','rowspan']};const doc=new DOMParser().parseFromString(`<!doctype html><body>${html}`,'text/html');const walk=node=>{for(let i=0;i<node.childNodes.length;i++){const c=node.childNodes[i];if(c.nodeType===1){const tag=c.tagName;if(!allow.has(tag)){while(c.firstChild)node.insertBefore(c.firstChild,c);node.removeChild(c);i--;continue}for(const a of Array.from(c.attributes)){const ok=(attrAllow[tag]||[]).includes(a.name.toLowerCase());if(!ok)c.removeAttribute(a.name)}if(tag==='A'){c.setAttribute('rel','noopener nofollow');c.target='_blank'}walk(c)}else if(c.nodeType===8){node.removeChild(c);i--}}};walk(doc.body);return doc.body.innerHTML}
}
window.GFMEditor=GFMEditor;
})();
