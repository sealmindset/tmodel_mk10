<%- include('partials/header', { pageTitle: 'New Prompt - Threat Model Generator', active: 'prompts', extraCss: [] }) %>

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="mb-0">New Prompt</h1>
    <div class="btn-group">
      <a class="btn btn-outline-secondary" href="/prompts">
        <i class="bi bi-arrow-left me-1"></i>Back to List
      </a>
    </div>
  </div>

  <div class="card shadow-sm">
    <div class="card-body">
      <form id="promptCreateForm">
        <div class="mb-3">
          <label for="promptTitle" class="form-label">Title</label>
          <input type="text" id="promptTitle" class="form-control" placeholder="Enter prompt title" required>
        </div>
        <div class="mb-3">
          <label for="promptText" class="form-label">Prompt Text</label>
          <textarea id="promptText" rows="14" class="form-control" placeholder="Enter prompt text" required></textarea>
        </div>
        <div class="text-end">
          <button type="button" id="createBtn" class="btn btn-primary">
            <i class="bi bi-save me-1"></i>Create
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Toasts -->
  <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>
</div>

<script>
(function() {
  const toast = (title, msg, type='info') => {
    const c = document.getElementById('toastContainer');
    const id = 't-' + Date.now();
    c.insertAdjacentHTML('beforeend', `
      <div id="${id}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-${type} text-white">
          <strong class="me-auto">${title}</strong>
          <small>Now</small>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
        </div>
        <div class="toast-body">${msg}</div>
      </div>`);
    const el = document.getElementById(id);
    const t = new bootstrap.Toast(el, { delay: 4000 });
    t.show();
    el.addEventListener('hidden.bs.toast', () => el.remove());
  };

  const createBtn = document.getElementById('createBtn');
  createBtn.addEventListener('click', async () => {
    const title = document.getElementById('promptTitle').value.trim();
    const prompt_text = document.getElementById('promptText').value.trim();
    if (!title || !prompt_text) { toast('Validation', 'Title and Prompt Text are required', 'warning'); return; }
    try {
      const res = await fetch('/api/prompts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, prompt_text })
      });
      const data = await res.json();
      if (!res.ok || !data.success || !data.prompt) throw new Error(data.error || 'Failed to create');
      window.location.href = `/prompts/${data.prompt.id}`;
    } catch (e) {
      console.error(e);
      toast('Error', e.message || 'Failed to create prompt', 'danger');
    }
  });
})();
</script>

<%- include('partials/footer', { extraJs: [] }) %>
