<%
// Helper functions for badges and styling
function getComponentTypeClass(type) {
  switch(type) {
    case 'Web Application': return 'primary';
    case 'Mobile Application': return 'info';
    case 'API': return 'success';
    case 'Desktop Application': return 'warning';
    case 'Database': return 'danger';
    case 'Server': return 'dark';
    case 'Network': return 'secondary';
    default: return 'light';
  }
}

function getVulnerabilitySeverityClass(severity) {
  switch(severity) {
    case 'Critical': return 'danger';
    case 'High': return 'warning';
    case 'Medium': return 'info';
    case 'Low': return 'success';
    default: return 'secondary';
  }
}

function getSafeguardStatusClass(status) {
  switch(status) {
    case 'Implemented': return 'success';
    case 'Planned': return 'info';
    case 'In Progress': return 'warning';
    case 'Not Implemented': return 'danger';
    default: return 'secondary';
  }
}
%>

<%- include('partials/header', { pageTitle: `${component.name} - Component Details`, active: 'components', extraCss: [] }) %>

<div class="container mt-4">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/projects">Projects</a></li>
      <% if (projects && projects.length > 0) { %>
        <li class="breadcrumb-item"><a href="/projects/<%= projects[0].id %>"><%= projects[0].name %></a></li>
      <% } %>
      <li class="breadcrumb-item active" aria-current="page"><%= component.name %></li>
    </ol>
  </nav>

  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0"><%= component.name %></h1>
    <div class="btn-group">
      <button type="button" class="btn btn-primary" id="editComponentBtn">
        <i class="bi bi-pencil me-1"></i>Edit Component
      </button>
      <button type="button" class="btn btn-success" id="headerAssignSafeguardsBtn">
        <i class="bi bi-shield-check me-1"></i>Assign Safeguards
      </button>
      <button type="button" class="btn btn-warning text-white" id="scanComponentBtn">
        <i class="bi bi-radar me-1"></i>Scan for Vulnerabilities
      </button>
    </div>
  </div>
  
  <!-- Alert container for notifications -->
  <div id="componentDetailAlertContainer"></div>
  
  <!-- Hidden component ID for JavaScript access -->
  <input type="hidden" id="componentId" value="<%= component.id %>" data-component-id="<%= component.id %>">
  
  <!-- Component Overview Card -->
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Component Overview</h5>
      <button class="btn btn-sm btn-outline-primary" id="editComponentDetailsBtn">
        <i class="bi bi-pencil me-1"></i>Edit
      </button>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-8">
          <h3><%= component.name %></h3>
          <p class="mb-3"><%= component.description || 'No description provided' %></p>
          
          <div class="row mb-3">
            <div class="col-md-4">
              <small class="text-muted d-block">Type</small>
              <span class="badge bg-<%= getComponentTypeClass(component.type) %>">
                <%= component.type || 'Not specified' %>
              </span>
            </div>
            <div class="col-md-4">
              <small class="text-muted d-block">Version</small>
              <p><%= component.version || 'Not specified' %></p>
            </div>
            <div class="col-md-4">
              <small class="text-muted d-block">Reusable</small>
              <p><%= component.is_reusable ? 'Yes' : 'No' %></p>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-4">
              <small class="text-muted d-block">Created</small>
              <p><%= new Date(component.created_at).toLocaleDateString() %></p>
            </div>
            <div class="col-md-4">
              <small class="text-muted d-block">Last Updated</small>
              <p><%= new Date(component.updated_at).toLocaleDateString() %></p>
            </div>
            <div class="col-md-4">
              <small class="text-muted d-block">Tags</small>
              <div>
                <% if (component.tags && component.tags.length > 0) { %>
                  <% component.tags.forEach(tag => { %>
                    <span class="badge bg-secondary me-1"><%= tag %></span>
                  <% }); %>
                <% } else { %>
                  <span class="text-muted">No tags</span>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card h-100 bg-light">
            <div class="card-body">
              <h5 class="card-title">Security Summary</h5>
              
              <div class="d-flex justify-content-between mb-2">
                <span>Projects:</span>
                <strong><%= stats ? stats.projects : 0 %></strong>
              </div>
              
              <div class="d-flex justify-content-between mb-2">
                <span>Safeguards:</span>
                <strong><%= stats ? stats.safeguards : 0 %></strong>
              </div>
              
              <div class="d-flex justify-content-between mb-2">
                <span>Vulnerabilities:</span>
                <strong class="<%= vulnerabilityCount > 0 ? 'text-danger' : '' %>"><%= vulnerabilityCount %></strong>
              </div>
              
              <% if (vulnerabilityCount > 0) { %>
                <div class="mt-3">
                  <small class="text-muted d-block mb-1">Vulnerability Breakdown</small>
                  <% ['Critical', 'High', 'Medium', 'Low'].forEach(severity => { %>
                    <% const count = stats && stats.vulnerabilities && stats.vulnerabilities[severity] ? stats.vulnerabilities[severity] : 0 %>
                    <% if (count > 0) { %>
                      <div class="d-flex justify-content-between mb-1">
                        <span class="text-<%= getVulnerabilitySeverityClass(severity) %>"><%= severity %>:</span>
                        <strong><%= count %></strong>
                      </div>
                    <% } %>
                  <% }); %>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Threat Models -->
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Threat Models</h5>
      <div class="btn-group">
        <button type="button" class="btn btn-sm btn-primary" id="assignThreatModelsBtn">
          <i class="bi bi-link me-1"></i>Assign Threat Models
        </button>
        <a href="/create?component_id=<%= component.id %>" class="btn btn-sm btn-outline-primary">
          <i class="bi bi-file-earmark-plus me-1"></i>Create New Model
        </a>
        <a href="/models?component_id=<%= component.id %>" class="btn btn-sm btn-outline-secondary">
          <i class="bi bi-search me-1"></i>View All Models
        </a>
      </div>
    </div>
    <div class="card-body">
      <p class="text-muted mb-3">
        <i class="bi bi-info-circle me-1"></i>
        Manage threat models for this component. Assigned models will appear in the list below.
      </p>
      
      <!-- Container for dynamically loaded threat models -->
      <div id="threatModelAssignmentsContainer">
        <div class="text-center py-3">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading threat models...</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Projects Using This Component -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="mb-0">Projects Using This Component</h5>
    </div>
    <div class="card-body">
      <% if (projects && projects.length > 0) { %>
        <div class="table-responsive">
          <table class="table table-hover" id="projectsTable">
            <thead>
              <tr>
                <th>Project Name</th>
                <th>Business Unit</th>
                <th>Criticality</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% projects.forEach(project => { %>
                <tr>
                  <td>
                    <a href="/projects/<%= project.id %>" class="fw-bold text-decoration-none">
                      <%= project.name %>
                    </a>
                  </td>
                  <td><%= project.business_unit || 'N/A' %></td>
                  <td><%= project.criticality || 'N/A' %></td>
                  <td><%= project.status || 'N/A' %></td>
                  <td>
                    <a href="/projects/<%= project.id %>" class="btn btn-sm btn-outline-primary">
                      <i class="bi bi-eye"></i>
                    </a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } else { %>
        <div class="alert alert-info">
          This component is not currently used in any projects.
        </div>
      <% } %>
    </div>
  </div>
  
  <!-- Safeguards -->
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Safeguards</h5>
      <div class="btn-group">
        <button class="btn btn-sm btn-outline-primary" id="assignSafeguardsBtn">
          <i class="bi bi-shield-check me-1"></i>Assign Safeguards
        </button>
        <button class="btn btn-sm btn-outline-primary" id="addSafeguardBtn2">
          <i class="bi bi-shield-plus me-1"></i>Add Safeguard
        </button>
      </div>
    </div>
    <div class="card-body">
      <!-- Container for dynamically loaded safeguards -->
      <div id="safeguardAssignmentsContainer">
        <div class="text-center py-3">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading safeguards...</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Vulnerabilities -->
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Vulnerabilities</h5>
      <button class="btn btn-sm btn-outline-primary" id="scanForVulnerabilitiesBtn">
        <i class="bi bi-radar me-1"></i>Scan for Vulnerabilities
      </button>
    </div>
    <div class="card-body">
      <% if (vulnerabilities && vulnerabilities.length > 0) { %>
        <div class="table-responsive">
          <table class="table table-hover" id="vulnerabilitiesTable">
            <thead>
              <tr>
                <th>Name</th>
                <th>Severity</th>
                <th>Status</th>
                <th>Detected</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% vulnerabilities.forEach(vulnerability => { %>
                <tr>
                  <td><%= vulnerability.name %></td>
                  <td>
                    <span class="badge bg-<%= getVulnerabilitySeverityClass(vulnerability.severity) %>">
                      <%= vulnerability.severity %>
                    </span>
                  </td>
                  <td><%= vulnerability.status || 'Open' %></td>
                  <td><%= new Date(vulnerability.created_at).toLocaleDateString() %></td>
                  <td>
                    <a href="/vulnerabilities/<%= vulnerability.id %>" class="btn btn-sm btn-outline-primary">
                      <i class="bi bi-eye"></i>
                    </a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } else { %>
        <div class="alert alert-success">
          No vulnerabilities have been detected for this component.
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Add Safeguard Modal -->
<div class="modal fade" id="addSafeguardModal" tabindex="-1" aria-labelledby="addSafeguardModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addSafeguardModalLabel">Add Safeguard</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="safeguardForm">
          <div class="mb-3">
            <label for="safeguardName" class="form-label">Safeguard Name</label>
            <input type="text" class="form-control" id="safeguardName" required>
          </div>
          <div class="mb-3">
            <label for="safeguardType" class="form-label">Type</label>
            <select class="form-select" id="safeguardType">
              <option value="Technical">Technical</option>
              <option value="Administrative">Administrative</option>
              <option value="Physical">Physical</option>
              <option value="Preventive">Preventive</option>
              <option value="Detective">Detective</option>
              <option value="Corrective">Corrective</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="safeguardDescription" class="form-label">Description</label>
            <textarea class="form-control" id="safeguardDescription" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="implementationStatus" class="form-label">Implementation Status</label>
            <select class="form-select" id="implementationStatus">
              <option value="Implemented">Implemented</option>
              <option value="Planned">Planned</option>
              <option value="In Progress">In Progress</option>
              <option value="Not Implemented">Not Implemented</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="implementationNotes" class="form-label">Implementation Notes</label>
            <textarea class="form-control" id="implementationNotes" rows="2"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveSafeguardBtn">Add Safeguard</button>
      </div>
    </div>
  </div>
</div>

<!-- Reference Architecture Modal -->
<div class="modal fade" id="refArchModal" tabindex="-1" aria-labelledby="refArchModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="refArchModalLabel">Configure Reference Architecture</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="refArchForm">
          <input type="hidden" id="refArchSafeguardId">
          <div class="mb-3">
            <h6>Reference Architecture</h6>
            <div class="row g-2">
              <div class="col-md-5">
                <label for="refArchCategory" class="form-label">Category</label>
                <select id="refArchCategory" class="form-select" required>
                  <option value="">Select category…</option>
                </select>
              </div>
              <div class="col-md-5">
                <label for="refArchOption" class="form-label">Option</label>
                <select id="refArchOption" class="form-select" required disabled>
                  <option value="">Select option…</option>
                </select>
              </div>
              <div class="col-md-2">
                <label for="refArchColor" class="form-label">State</label>
                <select id="refArchColor" class="form-select" required>
                  <option value="green" data-color="#198754">Essential</option>
                  <option value="red" data-color="#dc3545">Required Tech Missing</option>
                  <option value="yellow" data-color="#ffc107">Adaptable</option>
                  <option value="blue" data-color="#0d6efd">Not Required</option>
                  <option value="grey" data-color="#6c757d">N/A</option>
                </select>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveRefArchBtn">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Component Modal -->
<div class="modal fade" id="editComponentModal" tabindex="-1" aria-labelledby="editComponentModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editComponentModalLabel">Edit Component</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editComponentForm">
          <div class="mb-3">
            <label for="componentName" class="form-label">Component Name</label>
            <input type="text" class="form-control" id="componentName" value="<%= component.name %>" required>
          </div>
          <div class="mb-3">
            <label for="componentType" class="form-label">Type</label>
            <select class="form-select" id="componentType">
              <option value="Web Application" <%= component.type === 'Web Application' ? 'selected' : '' %>>Web Application</option>
              <option value="Mobile Application" <%= component.type === 'Mobile Application' ? 'selected' : '' %>>Mobile Application</option>
              <option value="API" <%= component.type === 'API' ? 'selected' : '' %>>API</option>
              <option value="Desktop Application" <%= component.type === 'Desktop Application' ? 'selected' : '' %>>Desktop Application</option>
              <option value="Database" <%= component.type === 'Database' ? 'selected' : '' %>>Database</option>
              <option value="Server" <%= component.type === 'Server' ? 'selected' : '' %>>Server</option>
              <option value="Network" <%= component.type === 'Network' ? 'selected' : '' %>>Network</option>
              <option value="System" <%= component.type === 'System' ? 'selected' : '' %>>System</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="componentDescription" class="form-label">Description</label>
            <textarea class="form-control" id="componentDescription" rows="3"><%= component.description || '' %></textarea>
          </div>
          <div class="mb-3">
            <label for="componentVersion" class="form-label">Version</label>
            <input type="text" class="form-control" id="componentVersion" value="<%= component.version || '' %>">
          </div>
          <div class="mb-3">
            <label for="componentTags" class="form-label">Tags (comma separated)</label>
            <input type="text" class="form-control" id="componentTags" value="<%= component.tags ? component.tags.join(', ') : '' %>">
          </div>
          <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="isReusable" <%= component.is_reusable ? 'checked' : '' %>>
            <label class="form-check-label" for="isReusable">
              Reusable Component
            </label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveComponentBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Create New Safeguard Modal -->
<div class="modal fade" id="createSafeguardModal" tabindex="-1" aria-labelledby="createSafeguardModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createSafeguardModalLabel">Create New Safeguard</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="createSafeguardForm">
          <input type="hidden" id="componentId" value="<%= component.id %>">
          
          <div class="mb-3">
            <label for="safeguardName" class="form-label">Safeguard Name *</label>
            <input type="text" class="form-control" id="safeguardName" required>
          </div>
          
          <div class="mb-3">
            <label for="safeguardType" class="form-label">Type *</label>
            <select class="form-select" id="safeguardType" required>
              <option value="">Select Type</option>
              <option value="Preventive">Preventive</option>
              <option value="Detective">Detective</option>
              <option value="Corrective">Corrective</option>
              <option value="Recovery">Recovery</option>
              <option value="Deterrent">Deterrent</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label for="safeguardDescription" class="form-label">Description</label>
            <textarea class="form-control" id="safeguardDescription" rows="3"></textarea>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="implementationStatus" class="form-label">Implementation Status</label>
              <select class="form-select" id="implementationStatus">
                <option value="Not Implemented">Not Implemented</option>
                <option value="Partially Implemented">Partially Implemented</option>
                <option value="Implemented">Implemented</option>
                <option value="Planned">Planned</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label for="effectiveness" class="form-label">Effectiveness Rating (1-5)</label>
              <input type="number" class="form-control" id="effectiveness" min="1" max="5" value="3">
            </div>
          </div>
          
          <div class="mb-3">
            <label for="safeguardNotes" class="form-label">Notes</label>
            <textarea class="form-control" id="safeguardNotes" rows="2"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveSafeguardBtn">Create Safeguard</button>
      </div>
    </div>
  </div>
</div>

<%- include('partials/footer', { extraJs: [] }) %>
  <!-- Modal Manager - load this first to ensure proper modal handling -->
  <script src="/js/modal-manager.js"></script>
  <script src="/js/reusable-assign-threat-models-modal.js"></script>
  <script src="/js/reusable-assign-safeguards-modal.js"></script>
  <script src="/js/component-safeguards.js"></script>
  <script src="/js/safeguard-assignments.js"></script>

  <!-- Component-specific scripts -->
  <script src="/js/component-threat-models.js"></script>
  <script src="/js/componentDetail.js"></script>

  <!-- Initialize Component Detail Scripts -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      /**
       * This function ensures no modals are left open or in a broken state
       * It properly cleans up all Bootstrap modal instances
       */
      function cleanupModalState() {
        // First, properly dispose of any Bootstrap modal instances
        document.querySelectorAll('.modal').forEach(modalEl => {
          try {
            if (modalEl) {
              const bsInstance = bootstrap.Modal.getInstance(modalEl);
              if (bsInstance) bsInstance.dispose();
            } else {
              console.error('cleanupModalState: Modal element not found for disposal:', modalEl);
            }
          } catch (e) {
            console.warn('Failed to dispose modal:', e);
          }
        });
        
        // Remove modal-open class from body
        document.body.classList.remove('modal-open');
        
        // Remove any leftover backdrops
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
      }
      
      /**
       * Shows the safeguard assignment modal correctly
       */
      // Shows the dynamic assign safeguards modal
      function showSafeguardAssignmentModal(e) {
        if (e) e.preventDefault();
        const componentId = document.getElementById('componentId')?.value;
        if (!componentId) {
          alert('Component ID not found.');
          return;
        }
        openAssignSafeguardsModal({
          componentId,
          onAssigned: function() {
            // Refresh the safeguards list
            const container = document.getElementById('safeguardAssignmentsContainer');
            if (container) {
              fetchSafeguards(componentId, container);
            }
          }
        });
      }
      
      /**
       * Shows the create safeguard modal correctly
       */
      function showCreateSafeguardModal(e) {
        if (e) e.preventDefault();
        console.log('Opening create safeguard modal');
        
        // Clean up first
        cleanupModalState();
        
        // Open the modal with a slight delay to ensure cleanup is complete
        setTimeout(() => {
          const modalEl = document.getElementById('createSafeguardModal');
          if (!modalEl) {
            console.error('Create safeguard modal not found in DOM');
            return;
          }
          
          try {
            // Initialize a fresh modal instance
            const modal = new bootstrap.Modal(modalEl);
            modal.show();
          } catch (error) {
            console.error('Error showing create safeguard modal:', error);
          }
        }, 100);
      }
      
      // Set up event listeners for the Assign Safeguards button
      const assignSafeguardBtn = document.getElementById('assignSafeguardsBtn');
      if (assignSafeguardBtn) {
        assignSafeguardBtn.addEventListener('click', showSafeguardAssignmentModal);
      }
      
      // Set up event listener for header Assign Safeguards button
      const headerAssignBtn = document.getElementById('headerAssignSafeguardsBtn');
      if (headerAssignBtn) {
        headerAssignBtn.addEventListener('click', showSafeguardAssignmentModal);
      }
      
      // Set up event listener for Add Safeguard button - show create modal
      const addSafeguardBtn = document.getElementById('addSafeguardBtn2');
      if (addSafeguardBtn) {
        addSafeguardBtn.addEventListener('click', showCreateSafeguardModal);
        console.log('Assigned create modal handler to addSafeguardBtn2');
      }
      
      // Also handle the empty state add first safeguard button
      const addFirstSafeguardBtn = document.getElementById('addFirstSafeguardBtn');
      if (addFirstSafeguardBtn) {
        addFirstSafeguardBtn.addEventListener('click', showCreateSafeguardModal);
        console.log('Assigned create modal handler to addFirstSafeguardBtn');
      }
            // Handle saving a new safeguard
      const saveSafeguardBtn = document.getElementById('saveSafeguardBtn');
      if (saveSafeguardBtn) {
        saveSafeguardBtn.addEventListener('click', async function() {
          // Get form values
          const componentId = document.getElementById('componentId').value;
          const name = document.getElementById('safeguardName').value;
          const type = document.getElementById('safeguardType').value;
          const description = document.getElementById('safeguardDescription').value;
          const implementation_status = document.getElementById('implementationStatus').value;
          const effectiveness = document.getElementById('effectiveness').value;
          const notes = document.getElementById('safeguardNotes').value;
          
          // Validate required fields (these are required by the API)
          if (!name) {
            alert('Safeguard name is required');
            return;
          }
          
          if (!type) {
            alert('Safeguard type is required');
            return;
          }
          
          if (!description) {
            alert('Safeguard description is required');
            return;
          }
          
          try {
            console.log('Submitting safeguard with data:', {
              name,
              type,
              description,
              implementation_status,
              effectiveness: parseInt(effectiveness, 10),
              notes
            });
            
            const response = await fetch('/api/safeguards', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                name,
                type,
                description,
                implementation_status,
                notes, 
                effectiveness: parseInt(effectiveness, 10)
              })
            });
            
            if (!response.ok) {
              const errorText = await response.text();
              console.error('Server error response:', errorText);
              throw new Error(`Server responded with ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
              // Close the modal
              const modalEl = document.getElementById('createSafeguardModal');
              if (modalEl) {
                const modal = bootstrap.Modal.getInstance(modalEl);
                if (modal) {
                  modal.hide();
                }
              } else {
                console.error('Success handler: createSafeguardModal element not found in DOM');
              }
              
              // Show success message
              const alertContainer = document.getElementById('componentDetailAlertContainer');
              if (alertContainer) {
                alertContainer.innerHTML = `
                  <div class="alert alert-success alert-dismissible fade show" role="alert">
                    Safeguard created successfully!
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                  </div>
                `;
              }
              
              // Reload the page to show the new safeguard
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              alert('Error creating safeguard: ' + (result.error || 'Unknown error'));
            }
          } catch (error) {
            console.error('Error creating safeguard:', error);
            alert('Error creating safeguard: ' + error.message);
          }
        });
      }
    });
  </script>
  <!-- jQuery (must be loaded before assignment modal JS) -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Assignment Modal JS -->
</body>
</html>
