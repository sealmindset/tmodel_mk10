<%- include('partials/header', { pageTitle: 'Create Threat Model', active: 'create', extraCss: [] }) %>

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create a New Threat Model</h1>
    <div class="btn-group">
      <a href="/" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-1"></i>Back to Dashboard
      </a>
    </div>
  </div>

  <!-- Status indicator spinner -->
  <div class="my-3" id="statusIndicator" style="display:none;">
    <span class="spinner-border text-primary spinner-border-sm" role="status"></span>
    <span class="ms-2 text-primary">Processing...</span>
  </div>

  <div class="card">
    <div class="card-body">
      <% 
        // Safe defaults if route doesn't pass these locals
        const _llmProvider = typeof llmProvider !== 'undefined' ? llmProvider : 'openai';
        const _openaiModel = typeof openaiModel !== 'undefined' ? openaiModel : 'gpt-4';
        const _ollamaModel = typeof ollamaModel !== 'undefined' ? ollamaModel : 'llama3';
      %>
      <form id="threatModelForm" method="POST" onsubmit="console.log('Form submitting with subject:', document.getElementById('subject').value)">
        <!-- System to Analyze -->
        <div class="mb-3">
          <label for="subject" class="form-label">System to Analyze</label>
          <input type="text" class="form-control" id="subject" name="subject" placeholder="e.g., Web Application, Mobile App, API Service" value="<%= typeof projectTitle !== 'undefined' ? projectTitle : '' %>">
        </div>
        <!-- Hidden Project ID to align backend association -->
        <input type="hidden" id="projectId" name="projectId" value="<%= typeof projectId !== 'undefined' ? projectId : '' %>">

        <script>
          // Handle query parameter for pre-filling the subject field
          document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const subjectParam = urlParams.get('subject');
            if (subjectParam) {
              const subjectField = document.getElementById('subject');
              if (subjectField) subjectField.value = decodeURIComponent(subjectParam);
            }

            // Show/hide status indicator on form submit
            const form = document.getElementById('threatModelForm');
            const statusIndicator = document.getElementById('statusIndicator');
            if (form && statusIndicator) {
              form.addEventListener('submit', function() {
                const processingModal = document.getElementById('processingModal');
                if (processingModal) processingModal.style.display = 'block';
                if (statusIndicator) statusIndicator.style.display = 'inline-block';
                const submitBtn = document.getElementById('submitBtn');
                if (submitBtn) submitBtn.disabled = true;
              });
            }
          });
        </script>

        <!-- LLM Provider -->
        <div class="mb-3">
          <label for="llmProvider" class="form-label">LLM Provider</label>
          <select class="form-select" id="llmProvider" name="llmProvider">
            <option value="openai" <%= _llmProvider === 'openai' ? 'selected' : '' %>>OpenAI</option>
            <option value="ollama" <%= _llmProvider === 'ollama' ? 'selected' : '' %>>Ollama</option>
          </select>
        </div>

        <!-- AI Model -->
        <div class="mb-3">
          <label for="aiModel" class="form-label">AI Model to Use</label>
          <select class="form-select" id="aiModel" name="model"></select>
          <div class="form-text" id="providerInfo"></div>
        </div>

        <!-- Defaults holder to avoid EJS in JS context (prevents lint errors) -->
        <div id="llmDefaults" style="display:none;"
             data-llm-provider="<%= _llmProvider %>"
             data-openai-model="<%= _openaiModel %>"
             data-ollama-model="<%= _ollamaModel %>"></div>

        <script>
          const defaultsEl = document.getElementById('llmDefaults');
          const llmProviderDefault = (defaultsEl && defaultsEl.dataset.llmProvider) || 'openai';
          const openaiModelDefault = (defaultsEl && defaultsEl.dataset.openaiModel) || 'gpt-4';
          const ollamaModelDefault = (defaultsEl && defaultsEl.dataset.ollamaModel) || 'llama3';

          async function updateModelDropdown(provider) {
            const modelSelect = document.getElementById('aiModel');
            const providerInfo = document.getElementById('providerInfo');
            modelSelect.innerHTML = '';
            let models = [];
            let defaultModel = '';
            if (provider === 'ollama') {
              try {
                const data = await xhrGetJson('/api/ollama-models', 15000);
                if (data.success && Array.isArray(data.models)) {
                  models = data.models;
                } else {
                  models = [{ name: ollamaModelDefault }];
                }
              } catch (err) {
                models = [{ name: ollamaModelDefault }];
              }
              defaultModel = ollamaModelDefault;
              providerInfo.innerHTML = 'Using local Ollama models. <a href="/settings">Change provider in settings</a>.';
            } else {
              try {
                const data = await xhrGetJson('/api/openai-models', 15000);
                if (data.success && Array.isArray(data.models) && data.models.length) {
                  models = data.models.map(id => ({ name: id }));
                } else {
                  models = [{ name: openaiModelDefault || 'gpt-4' }];
                }
              } catch (err) {
                models = [{ name: openaiModelDefault || 'gpt-4' }];
              }
              defaultModel = openaiModelDefault || (models[0] && models[0].name) || 'gpt-4';
              providerInfo.innerHTML = 'Using OpenAI API. <a href="/settings/openai">Manage OpenAI settings</a>.';
            }
            models.forEach(model => {
              const opt = document.createElement('option');
              opt.value = model.name;
              opt.textContent = model.label || model.name;
              if (model.name === defaultModel) opt.selected = true;
              modelSelect.appendChild(opt);
            });
          }

          document.addEventListener('DOMContentLoaded', function() {
            const providerSelect = document.getElementById('llmProvider');
            updateModelDropdown(providerSelect.value);
            providerSelect.addEventListener('change', function() {
              updateModelDropdown(this.value);
            });
          });
        </script>

        <!-- Prompt selection fields -->
        <div class="mb-3">
          <label for="promptId" class="form-label">Prompt Template</label>
          <div class="input-group">
            <input type="hidden" id="promptId" name="selectedPromptId">
            <input type="text" class="form-control" id="promptTitle" name="promptTitle" placeholder="Select a prompt template" readonly>
            <button class="btn btn-outline-secondary" type="button" data-bs-toggle="modal" data-bs-target="#promptsSelectModal">
              <i class="bi bi-list"></i> Select
            </button>
          </div>
        </div>

        <div class="d-grid gap-2 mb-3">
          <button type="button" class="btn btn-primary" id="submitBtn">
            <i class="bi bi-lightning me-1"></i>Generate Threat Model
          </button>
        </div>

        <!-- Result preview -->
        <div id="generationResult" class="mb-3" style="display:none;">
          <label class="form-label">Generated Content</label>
          <pre id="generationText" class="border rounded p-3" style="max-height: 420px; overflow: auto; background: #f8f9fa;"></pre>
        </div>

        <!-- Modal overlay spinner -->
        <div class="modal" tabindex="-1" id="processingModal" style="display:none; background:rgba(0,0,0,0.3);">
          <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center p-4">
              <div class="spinner-border text-primary mb-3" style="width:3rem;height:3rem;" role="status"></div>
              <div style="font-size:1.2rem;">Processing, please wait...</div>
            </div>
          </div>
        </div>

        <script>
          // XHR helpers to avoid fetch() hangs and enforce timeouts
          function xhrGetJson(url, timeoutMs = 15000) {
            return new Promise((resolve, reject) => {
              try {
                const xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.setRequestHeader('Accept', 'application/json');
                xhr.timeout = timeoutMs;
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    console.log('[REPORTGEN][XHR][GET] url:', url, 'status:', xhr.status);
                    if (xhr.status >= 200 && xhr.status < 300) {
                      try {
                        const json = JSON.parse(xhr.responseText || '{}');
                        resolve(json);
                      } catch (e) {
                        reject(new Error('Invalid JSON response'));
                      }
                    } else {
                      // Try to parse server-provided error
                      try {
                        const errJson = JSON.parse(xhr.responseText || '{}');
                        if (errJson && errJson.error) return reject(new Error('HTTP ' + xhr.status + ': ' + errJson.error));
                      } catch(_) {}
                      reject(new Error('HTTP ' + xhr.status));
                    }
                  }
                };
                xhr.ontimeout = function() {
                  console.warn('[REPORTGEN][XHR][GET] timeout for', url);
                  reject(new Error('timeout'));
                };
                xhr.onerror = function() {
                  console.error('[REPORTGEN][XHR][GET] network error for', url);
                  reject(new Error('network_error'));
                };
                xhr.send();
              } catch (e) {
                reject(e);
              }
            });
          }

          function xhrPostJson(url, payload, timeoutMs = 45000) {
            return new Promise((resolve, reject) => {
              try {
                const xhr = new XMLHttpRequest();
                xhr.open('POST', url, true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.setRequestHeader('Accept', 'application/json');
                xhr.timeout = timeoutMs;
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    console.log('[REPORTGEN][XHR][POST] url:', url, 'status:', xhr.status);
                    if (xhr.status >= 200 && xhr.status < 300) {
                      try {
                        const json = JSON.parse(xhr.responseText || '{}');
                        resolve(json);
                      } catch (e) {
                        reject(new Error('Invalid JSON response'));
                      }
                    } else {
                      // Try to parse server-provided error
                      try {
                        const errJson = JSON.parse(xhr.responseText || '{}');
                        if (errJson && errJson.error) return reject(new Error('HTTP ' + xhr.status + ': ' + errJson.error));
                      } catch(_) {}
                      reject(new Error('HTTP ' + xhr.status));
                    }
                  }
                };
                xhr.ontimeout = function() {
                  console.warn('[REPORTGEN][XHR][POST] timeout for', url);
                  reject(new Error('timeout'));
                };
                xhr.onerror = function() {
                  console.error('[REPORTGEN][XHR][POST] network error for', url);
                  reject(new Error('network_error'));
                };
                xhr.send(JSON.stringify(payload || {}));
              } catch (e) {
                reject(e);
              }
            });
          }

          async function loadPromptTextById(promptId) {
            try {
              console.log('[REPORTGEN] Fetching prompt by ID (XHR):', promptId);
              const data = await xhrGetJson(`/api/prompts/${encodeURIComponent(promptId)}`, 15000);
              const prompt = (data && data.prompt) || {};
              const text = prompt.prompt_text || prompt.text || '';
              console.log('[REPORTGEN] Loaded prompt text length:', text.length);
              return text;
            } catch (e) {
              console.error('[REPORTGEN] Error loading prompt:', e);
              return '';
            }
          }

          function composePrompt(template, subject) {
            const tpl = (template && template.trim().length) ? template : 'Analyze the following system: SUBJECT';
            // Replace {{SUBJECT}} or SUBJECT tokens
            const composed = tpl.replace(/\{\{\s*SUBJECT\s*\}\}|SUBJECT/g, subject || '');
            console.log('[REPORTGEN] Composed prompt preview:', composed.slice(0, 160));
            return composed;
          }

          async function submitThreatModelForm() {
            const processingModal = document.getElementById('processingModal');
            const statusIndicator = document.getElementById('statusIndicator');
            const submitBtn = document.getElementById('submitBtn');
            try {
              if (processingModal) processingModal.style.display = 'block';
              if (statusIndicator) statusIndicator.style.display = 'inline-block';
              if (submitBtn) submitBtn.disabled = true;

              const subject = document.getElementById('subject').value || '';
              const model = document.getElementById('aiModel') ? document.getElementById('aiModel').value : '';
              const selectedPromptId = document.getElementById('promptId') ? document.getElementById('promptId').value : '';
              let llmProviderValue = 'openai';
              const llmProviderField = document.getElementById('llmProvider');
              if (llmProviderField && llmProviderField.value) {
                llmProviderValue = llmProviderField.value;
              }

              // Load prompt text if a template is selected
              let templateText = '';
              if (selectedPromptId) {
                templateText = await loadPromptTextById(selectedPromptId);
              }
              const finalPrompt = composePrompt(templateText, subject);

              // Call LLM generation endpoint via XHR with timeout to avoid hangs
              console.log('[REPORTGEN] Calling /api/llm/generate (XHR) with provider, model, temperature, max_tokens');
              const data = await xhrPostJson('/api/llm/generate', {
                provider: llmProviderValue,
                model: model,
                prompt: finalPrompt,
                temperature: 0.7,
                max_tokens: 1500
              }, 45000);
              const text = data && (data.text || data.response || data.generatedText) || '';
              console.log('[REPORTGEN] Generation response length:', text.length);

              const resultBox = document.getElementById('generationResult');
              const textBox = document.getElementById('generationText');
              if (textBox) textBox.textContent = text || '[Empty response]';
              if (resultBox) resultBox.style.display = 'block';
            } catch (error) {
              console.error('[REPORTGEN] Error during generation:', error);
              const msg = (error && error.message) ? error.message : 'Unknown error';
              alert('Error generating content: ' + msg + (msg === 'timeout' ? ' (request timed out)' : ''));
            } finally {
              if (processingModal) processingModal.style.display = 'none';
              if (statusIndicator) statusIndicator.style.display = 'none';
              if (submitBtn) submitBtn.disabled = false;
            }
          }

          document.addEventListener('DOMContentLoaded', function() {
            const submitBtn = document.getElementById('submitBtn');
            if (submitBtn) {
              submitBtn.addEventListener('click', function(e) {
                e.preventDefault();
                submitThreatModelForm();
              });
            }
            const form = document.getElementById('threatModelForm');
            if (form) {
              form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitThreatModelForm();
              });
            }
          });
        </script>

      </form>
    </div>
  </div>
</div>

<!-- New table-based prompts selection modal -->
<%- include('partials/prompts-select-table') %>

<%- include('partials/footer', { extraJs: ['/js/app.js', '/js/prompts-select.js'] }) %>
